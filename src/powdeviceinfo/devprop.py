from ctypes import (
    Structure,
    c_double,
    c_float,
    c_int8,
    c_int16,
    c_int32,
    c_int64,
    c_uint8,
    c_uint16,
    c_uint32,
    c_uint64,
)
from ctypes.wintypes import FILETIME
from dataclasses import dataclass
from enum import IntEnum
from typing import TYPE_CHECKING, Final

from powguid import Guid


class DevicePropertyKey(Structure):
    """DEVPROPKEY構造体。"""

    __slots__ = ()
    _fields_ = (
        ("fmtid", Guid),
        ("pid", c_uint32),
    )

    if TYPE_CHECKING:
        fmtid: Guid
        pid: int

    @staticmethod
    def from_define(a: int, b: int, c: int, d: int, e: int, f: int, g: int, h: int, i: int, j: int, k: int, pid: int):
        key = DevicePropertyKey()
        key.fmtid = Guid.from_define(a, b, c, d, e, f, g, h, i, j, k)
        key.pid = pid
        return key

    def __str__(self) -> str:
        return f"{self.fmtid} {self.pid}"

    def __repr__(self) -> str:
        return f"{self.fmtid} {self.pid}"

    def __hash__(self) -> int:
        return hash((self.fmtid, self.pid))


class DevicePropertyModifier(IntEnum):
    ARRAY = 0x00001000
    LIST = 0x00002000


class DevicePropertyType(IntEnum):
    EMPTY = 0x00000000
    NULL = 0x00000001
    SBYTE = 0x00000002
    BYTE = 0x00000003
    INT16 = 0x00000004
    UINT16 = 0x00000005
    INT32 = 0x00000006
    UINT32 = 0x00000007
    INT64 = 0x00000008
    UINT64 = 0x00000009
    FLOAT = 0x0000000A
    DOUBLE = 0x0000000B
    DECIMAL = 0x0000000C
    GUID = 0x0000000D
    CURRENCY = 0x0000000E
    DATE = 0x0000000F
    FILETIME = 0x00000010
    BOOLEAN = 0x00000011
    STRING = 0x00000012
    STRING_LIST = STRING | DevicePropertyModifier.LIST
    SECURITY_DESCRIPTOR = 0x00000013
    SECURITY_DESCRIPTOR_STRING = 0x00000014
    DEVPROPKEY = 0x00000015
    DEVPROPTYPE = 0x00000016
    BINARY = BYTE | DevicePropertyModifier.ARRAY
    ERROR = 0x00000017
    NTSTATUS = 0x00000018
    STRING_INDIRECT = 0x00000019


class DevicePropertyNullType:
    def __str__(self) -> str:
        return "(NULL)"

    def __repr__(self) -> str:
        return "(NULL)"


class DevicePropertyEmptyType:
    def __str__(self) -> str:
        return "(EMPTY)"

    def __repr__(self) -> str:
        return "(EMPTY)"


DEVICE_PROPERTY_NULL: Final = DevicePropertyNullType()
DEVICE_PROPERTY_EMPTY: Final = DevicePropertyEmptyType()


@dataclass
class DeviceProperty:
    key: DevicePropertyKey
    type: DevicePropertyType
    value_raw: bytes

    @property
    def value(self) -> object | None:
        match self.type:
            case DevicePropertyType.EMPTY:
                return DEVICE_PROPERTY_EMPTY
            case DevicePropertyType.NULL:
                return DEVICE_PROPERTY_NULL
            case DevicePropertyType.SBYTE:
                return c_int8.from_buffer(self.value_raw).value
            case DevicePropertyType.BYTE:
                return c_uint8.from_buffer(self.value_raw).value
            case DevicePropertyType.INT16:
                return c_int16.from_buffer(self.value_raw).value
            case DevicePropertyType.UINT16:
                return c_uint16.from_buffer(self.value_raw).value
            case DevicePropertyType.INT32:
                return c_int32.from_buffer(self.value_raw).value
            case DevicePropertyType.UINT32:
                return c_uint32.from_buffer(self.value_raw).value
            case DevicePropertyType.INT64:
                return c_int64.from_buffer(self.value_raw).value
            case DevicePropertyType.UINT64:
                return c_uint64.from_buffer(self.value_raw).value
            case DevicePropertyType.FLOAT:
                return c_float.from_buffer(self.value_raw).value
            case DevicePropertyType.DOUBLE:
                return c_double.from_buffer(self.value_raw).value
            case DevicePropertyType.GUID:
                return Guid.from_buffer(self.value_raw).value
            # CURRENCY = 0x0000000E
            # DATE = 0x0000000F
            case DevicePropertyType.FILETIME:
                return FILETIME.from_buffer_copy(self.value_raw)
            case DevicePropertyType.BOOLEAN:
                return self.value_raw[0] != 0
            case DevicePropertyType.STRING:
                return self.value_raw[:-2].decode("utf-16le")
            case DevicePropertyType.STRING_LIST:
                return self.value_raw[:-4].decode("utf-16le").split("\0")
            case DevicePropertyType.SECURITY_DESCRIPTOR:
                return self.value_raw
            case DevicePropertyType.SECURITY_DESCRIPTOR_STRING:
                return self.value_raw[:-2].decode("utf-16le")
            case DevicePropertyType.DEVPROPKEY:
                return DevicePropertyKey.from_buffer(self.value_raw)
            case DevicePropertyType.DEVPROPTYPE:
                return DevicePropertyType(int.from_bytes(self.value_raw[0:4], "little"))
            case DevicePropertyType.BINARY:
                return self.value_raw
            case DevicePropertyType.ERROR:
                return int.from_bytes(self.value_raw[0:4], "little")
            case DevicePropertyType.NTSTATUS:
                return int.from_bytes(self.value_raw[0:4], "little")
            case DevicePropertyType.STRING_INDIRECT:
                return self.value_raw.decode("utf-16le")
            case _:
                return None

    def __str__(self) -> str:
        return f"{str(self.value)} ({self.type.name})"

    def __repr__(self) -> str:
        return f"{str(self.value)} ({self.type.name})"

    def __hash__(self) -> int:
        return hash((self.key, self.type, self.value))

    @property
    def str_or_none(self) -> str | None:
        x = self.value
        return x if isinstance(x, str) else None

    @property
    def int_or_none(self) -> int | None:
        x = self.value
        return x if isinstance(x, int) else None


class DevicePropertyKeys:
    NAME = DevicePropertyKey.from_define(
        0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 10
    )  # DEVPROP_TYPE_STRING
    DEVICE_DESC = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 2
    )  # // DEVPROP_TYPE_STRING
    HARDWARE_IDS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 3
    )  # // DEVPROP_TYPE_STRING_LIST
    COMPATIBLE_IDS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 4
    )  # // DEVPROP_TYPE_STRING_LIST
    SERVICE = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 6
    )  # // DEVPROP_TYPE_STRING
    CLASS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 9
    )  # // DEVPROP_TYPE_STRING
    CLASS_GUID = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 10
    )  # // DEVPROP_TYPE_GUID
    DRIVER = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 11
    )  # // DEVPROP_TYPE_STRING
    CONFIG_FLAGS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 12
    )  # // DEVPROP_TYPE_UINT32
    MANUFACTURER = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 13
    )  # // DEVPROP_TYPE_STRING
    FRIENDLY_NAME = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 14
    )  # // DEVPROP_TYPE_STRING
    LOCATION_INFO = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 15
    )  # // DEVPROP_TYPE_STRING
    PDO_NAME = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 16
    )  # // DEVPROP_TYPE_STRING
    CAPABILITIES = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 17
    )  # // DEVPROP_TYPE_UINT32
    UI_NUMBER = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 18
    )  # // DEVPROP_TYPE_UINT32
    UPPER_FILTERS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 19
    )  # // DEVPROP_TYPE_STRING_LIST
    LOWER_FILTERS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 20
    )  # // DEVPROP_TYPE_STRING_LIST
    BUS_TYPE_GUID = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 21
    )  # // DEVPROP_TYPE_GUID
    LEGACY_BUS_TYPE = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 22
    )  # // DEVPROP_TYPE_UINT32
    BUS_NUMBER = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 23
    )  # // DEVPROP_TYPE_UINT32
    ENUMERATOR_NAME = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 24
    )  # // DEVPROP_TYPE_STRING
    SECURITY = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 25
    )  # // DEVPROP_TYPE_SECURITY_DESCRIPTOR
    SECURITY_SDS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 26
    )  # // DEVPROP_TYPE_SECURITY_DESCRIPTOR_STRING
    DEV_TYPE = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 27
    )  # // DEVPROP_TYPE_UINT32
    EXCLUSIVE = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 28
    )  # // DEVPROP_TYPE_BOOLEAN
    CHARACTERISTICS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 29
    )  # // DEVPROP_TYPE_UINT32
    ADDRESS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 30
    )  # // DEVPROP_TYPE_UINT32
    UI_NUMBER_DESC_FORMAT = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 31
    )  # // DEVPROP_TYPE_STRING
    POWER_DATA = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 32
    )  # // DEVPROP_TYPE_BINARY
    REMOVAL_POLICY = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 33
    )  # // DEVPROP_TYPE_UINT32
    REMOVAL_POLICY_DEFAULT = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 34
    )  # // DEVPROP_TYPE_UINT32
    REMOVAL_POLICY_OVERRIDE = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 35
    )  # // DEVPROP_TYPE_UINT32
    INSTALL_STATE = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 36
    )  # // DEVPROP_TYPE_UINT32
    LOCATION_PATHS = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 37
    )  # // DEVPROP_TYPE_STRING_LIST
    BASE_CONTAINER_ID = DevicePropertyKey.from_define(
        0xA45C254E, 0xDF1C, 0x4EFD, 0x80, 0x20, 0x67, 0xD1, 0x46, 0xA8, 0x50, 0xE0, 38
    )  # // DEVPROP_TYPE_GUID
    INSTANCE_ID = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 256
    )  # // DEVPROP_TYPE_STRING
    DEV_NODE_STATUS = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 2
    )  # // DEVPROP_TYPE_UINT32
    PROBLEM_CODE = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 3
    )  # // DEVPROP_TYPE_UINT32
    EJECTION_RELATIONS = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 4
    )  # // DEVPROP_TYPE_STRING_LIST
    REMOVAL_RELATIONS = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 5
    )  # // DEVPROP_TYPE_STRING_LIST
    POWER_RELATIONS = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 6
    )  # // DEVPROP_TYPE_STRING_LIST
    BUS_RELATIONS = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 7
    )  # // DEVPROP_TYPE_STRING_LIST
    PARENT = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 8
    )  # // DEVPROP_TYPE_STRING
    CHILDREN = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 9
    )  # // DEVPROP_TYPE_STRING_LIST
    SIBLINGS = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 10
    )  # // DEVPROP_TYPE_STRING_LIST
    TRANSPORT_RELATIONS = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 11
    )  # // DEVPROP_TYPE_STRING_LIST
    PROBLEM_STATUS = DevicePropertyKey.from_define(
        0x4340A6C5, 0x93FA, 0x4706, 0x97, 0x2C, 0x7B, 0x64, 0x80, 0x08, 0xA5, 0xA7, 12
    )  # // DEVPROP_TYPE_NTSTATUS
    REPORTED = DevicePropertyKey.from_define(
        0x80497100, 0x8C73, 0x48B9, 0xAA, 0xD9, 0xCE, 0x38, 0x7E, 0x19, 0xC5, 0x6E, 2
    )  # // DEVPROP_TYPE_BOOLEAN
    LEGACY = DevicePropertyKey.from_define(
        0x80497100, 0x8C73, 0x48B9, 0xAA, 0xD9, 0xCE, 0x38, 0x7E, 0x19, 0xC5, 0x6E, 3
    )  # // DEVPROP_TYPE_BOOLEAN
    CONTAINER_ID = DevicePropertyKey.from_define(
        0x8C7ED206, 0x3F8A, 0x4827, 0xB3, 0xAB, 0xAE, 0x9E, 0x1F, 0xAE, 0xFC, 0x6C, 2
    )  # // DEVPROP_TYPE_GUID
    IN_LOCAL_MACHINE_CONTAINER = DevicePropertyKey.from_define(
        0x8C7ED206, 0x3F8A, 0x4827, 0xB3, 0xAB, 0xAE, 0x9E, 0x1F, 0xAE, 0xFC, 0x6C, 4
    )  # // DEVPROP_TYPE_BOOLEAN
    MODEL = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 39
    )  # // DEVPROP_TYPE_STRING
    MODEL_ID = DevicePropertyKey.from_define(
        0x80D81EA6, 0x7473, 0x4B0C, 0x82, 0x16, 0xEF, 0xC1, 0x1A, 0x2C, 0x4C, 0x8B, 2
    )  # // DEVPROP_TYPE_GUID
    FRIENDLY_NAME_ATTRIBUTES = DevicePropertyKey.from_define(
        0x80D81EA6, 0x7473, 0x4B0C, 0x82, 0x16, 0xEF, 0xC1, 0x1A, 0x2C, 0x4C, 0x8B, 3
    )  # // DEVPROP_TYPE_UINT32
    MANUFACTURER_ATTRIBUTES = DevicePropertyKey.from_define(
        0x80D81EA6, 0x7473, 0x4B0C, 0x82, 0x16, 0xEF, 0xC1, 0x1A, 0x2C, 0x4C, 0x8B, 4
    )  # // DEVPROP_TYPE_UINT32
    PRESENCE_NOT_FOR_DEVICE = DevicePropertyKey.from_define(
        0x80D81EA6, 0x7473, 0x4B0C, 0x82, 0x16, 0xEF, 0xC1, 0x1A, 0x2C, 0x4C, 0x8B, 5
    )  # // DEVPROP_TYPE_BOOLEAN
    SIGNAL_STRENGTH = DevicePropertyKey.from_define(
        0x80D81EA6, 0x7473, 0x4B0C, 0x82, 0x16, 0xEF, 0xC1, 0x1A, 0x2C, 0x4C, 0x8B, 6
    )  # // DEVPROP_TYPE_INT32
    IS_ASSOCIATEABLE_BY_USER_ACTION = DevicePropertyKey.from_define(
        0x80D81EA6, 0x7473, 0x4B0C, 0x82, 0x16, 0xEF, 0xC1, 0x1A, 0x2C, 0x4C, 0x8B, 7
    )  # // DEVPROP_TYPE_BOOLEAN
    SHOW_IN_UNINSTALL_UI = DevicePropertyKey.from_define(
        0x80D81EA6, 0x7473, 0x4B0C, 0x82, 0x16, 0xEF, 0xC1, 0x1A, 0x2C, 0x4C, 0x8B, 8
    )  # // DEVPROP_TYPE_BOOLEAN
    COMPANION_APPS = DevicePropertyKey.from_define(
        0x6A742654, 0xD0B2, 0x4420, 0xA5, 0x23, 0xE0, 0x68, 0x35, 0x2A, 0xC1, 0xDF, 2
    )  # // DEVPROP_TYPE_STRING_LIST
    PRIMARY_COMPANION_APP = DevicePropertyKey.from_define(
        0x6A742654, 0xD0B2, 0x4420, 0xA5, 0x23, 0xE0, 0x68, 0x35, 0x2A, 0xC1, 0xDF, 3
    )  # // DEVPROP_TYPE_STRING
    NUMA_PROXIMITY_DOMAIN = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 1
    )  # // DEVPROP_TYPE_UINT32
    DHP_REBALANCE_POLICY = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 2
    )  # // DEVPROP_TYPE_UINT32
    NUMA_NODE = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 3
    )  # // DEVPROP_TYPE_UINT32
    BUS_REPORTED_DEVICE_DESC = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 4
    )  # // DEVPROP_TYPE_STRING
    IS_PRESENT = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 5
    )  # // DEVPROP_TYPE_BOOL
    HAS_PROBLEM = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 6
    )  # // DEVPROP_TYPE_BOOL
    CONFIGURATION_ID = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 7
    )  # // DEVPROP_TYPE_STRING
    REPORTED_DEVICE_IDS_HASH = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 8
    )  # // DEVPROP_TYPE_UINT32
    PHYSICAL_DEVICE_LOCATION = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 9
    )  # // DEVPROP_TYPE_BINARY
    BIOS_DEVICE_NAME = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 10
    )  # // DEVPROP_TYPE_STRING
    DRIVER_PROBLEM_DESC = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 11
    )  # // DEVPROP_TYPE_STRING
    DEBUGGER_SAFE = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 12
    )  # // DEVPROP_TYPE_UINT32
    POST_INSTALL_IN_PROGRESS = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 13
    )  # // DEVPROP_TYPE_BOOLEAN
    STACK = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 14
    )  # // DEVPROP_TYPE_STRING_LIST
    EXTENDED_CONFIGURATION_IDS = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 15
    )  # // DEVPROP_TYPE_STRING_LIST
    IS_REBOOT_REQUIRED = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 16
    )  # // DEVPROP_TYPE_BOOLEAN
    FIRMWARE_DATE = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 17
    )  # // DEVPROP_TYPE_FILETIME
    FIRMWARE_VERSION = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 18
    )  # // DEVPROP_TYPE_STRING
    FIRMWARE_REVISION = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 19
    )  # // DEVPROP_TYPE_STRING
    DEPENDENCY_PROVIDERS = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 20
    )  # // DEVPROP_TYPE_STRING_LIST
    DEPENDENCY_DEPENDENTS = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 21
    )  # // DEVPROP_TYPE_STRING_LIST
    SOFT_RESTART_SUPPORTED = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 22
    )  # // DEVPROP_TYPE_BOOLEAN
    EXTENDED_ADDRESS = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 23
    )  # // DEVPROP_TYPE_UINT64
    ASSIGNED_TO_GUEST = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 24
    )  # // DEVPROP_TYPE_BOOLEAN
    CREATOR_PROCESS_ID = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 25
    )  # // DEVPROP_TYPE_UINT32
    FIRMWARE_VENDOR = DevicePropertyKey.from_define(
        0x540B947E, 0x8B40, 0x45BC, 0xA8, 0xA2, 0x6A, 0x0B, 0x89, 0x4C, 0xBD, 0xA2, 26
    )  # // DEVPROP_TYPE_STRING
    SESSION_ID = DevicePropertyKey.from_define(
        0x83DA6326, 0x97A6, 0x4088, 0x94, 0x53, 0xA1, 0x92, 0x3F, 0x57, 0x3B, 0x29, 6
    )  # // DEVPROP_TYPE_UINT32
    INSTALL_DATE = DevicePropertyKey.from_define(
        0x83DA6326, 0x97A6, 0x4088, 0x94, 0x53, 0xA1, 0x92, 0x3F, 0x57, 0x3B, 0x29, 100
    )  # // DEVPROP_TYPE_FILETIME
    FIRST_INSTALL_DATE = DevicePropertyKey.from_define(
        0x83DA6326, 0x97A6, 0x4088, 0x94, 0x53, 0xA1, 0x92, 0x3F, 0x57, 0x3B, 0x29, 101
    )  # // DEVPROP_TYPE_FILETIME
    LAST_ARRIVAL_DATE = DevicePropertyKey.from_define(
        0x83DA6326, 0x97A6, 0x4088, 0x94, 0x53, 0xA1, 0x92, 0x3F, 0x57, 0x3B, 0x29, 102
    )  # // DEVPROP_TYPE_FILETIME
    LAST_REMOVAL_DATE = DevicePropertyKey.from_define(
        0x83DA6326, 0x97A6, 0x4088, 0x94, 0x53, 0xA1, 0x92, 0x3F, 0x57, 0x3B, 0x29, 103
    )  # // DEVPROP_TYPE_FILETIME
    DRIVER_DATE = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 2
    )  # // DEVPROP_TYPE_FILETIME
    DRIVER_VERSION = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 3
    )  # // DEVPROP_TYPE_STRING
    DRIVER_DESC = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 4
    )  # // DEVPROP_TYPE_STRING
    DRIVER_INF_PATH = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 5
    )  # // DEVPROP_TYPE_STRING
    DRIVER_INF_SECTION = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 6
    )  # // DEVPROP_TYPE_STRING
    DRIVER_INF_SECTION_EXT = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 7
    )  # // DEVPROP_TYPE_STRING
    MATCHING_DEVICE_ID = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 8
    )  # // DEVPROP_TYPE_STRING
    DRIVER_PROVIDER = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 9
    )  # // DEVPROP_TYPE_STRING
    DRIVER_PROP_PAGE_PROVIDER = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 10
    )  # // DEVPROP_TYPE_STRING
    DRIVER_CO_INSTALLERS = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 11
    )  # // DEVPROP_TYPE_STRING_LIST
    RESOURCE_PICKER_TAGS = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 12
    )  # // DEVPROP_TYPE_STRING
    RESOURCE_PICKER_EXCEPTIONS = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 13
    )  # // DEVPROP_TYPE_STRING
    DRIVER_RANK = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 14
    )  # // DEVPROP_TYPE_UINT32
    DRIVER_LOGO_LEVEL = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 15
    )  # // DEVPROP_TYPE_UINT32
    NO_CONNECT_SOUND = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 17
    )  # // DEVPROP_TYPE_BOOLEAN
    GENERIC_DRIVER_INSTALLED = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 18
    )  # // DEVPROP_TYPE_BOOLEAN
    ADDITIONAL_SOFTWARE_REQUESTED = DevicePropertyKey.from_define(
        0xA8B865DD, 0x2E3D, 0x4094, 0xAD, 0x97, 0xE5, 0x93, 0xA7, 0xC, 0x75, 0xD6, 19
    )  # // DEVPROP_TYPE_BOOLEAN
    SAFE_REMOVAL_REQUIRED = DevicePropertyKey.from_define(
        0xAFD97640, 0x86A3, 0x4210, 0xB6, 0x7C, 0x28, 0x9C, 0x41, 0xAA, 0xBE, 0x55, 2
    )  # // DEVPROP_TYPE_BOOLEAN
    SAFE_REMOVAL_REQUIRED_OVERRIDE = DevicePropertyKey.from_define(
        0xAFD97640, 0x86A3, 0x4210, 0xB6, 0x7C, 0x28, 0x9C, 0x41, 0xAA, 0xBE, 0x55, 3
    )  # // DEVPROP_TYPE_BOOLEAN

    __slots__ = ()


class DevicePackageDevicePropertyKeys:
    MODEL = DevicePropertyKey.from_define(
        0xCF73BB51, 0x3ABF, 0x44A2, 0x85, 0xE0, 0x9A, 0x3D, 0xC7, 0xA1, 0x21, 0x32, 2
    )  # // DEVPROP_TYPE_STRING
    VENDOR_WEB_SITE = DevicePropertyKey.from_define(
        0xCF73BB51, 0x3ABF, 0x44A2, 0x85, 0xE0, 0x9A, 0x3D, 0xC7, 0xA1, 0x21, 0x32, 3
    )  # // DEVPROP_TYPE_STRING
    DETAILED_DESCRIPTION = DevicePropertyKey.from_define(
        0xCF73BB51, 0x3ABF, 0x44A2, 0x85, 0xE0, 0x9A, 0x3D, 0xC7, 0xA1, 0x21, 0x32, 4
    )  # // DEVPROP_TYPE_STRING
    DOCUMENTATION_LINK = DevicePropertyKey.from_define(
        0xCF73BB51, 0x3ABF, 0x44A2, 0x85, 0xE0, 0x9A, 0x3D, 0xC7, 0xA1, 0x21, 0x32, 5
    )  # // DEVPROP_TYPE_STRING
    ICON = DevicePropertyKey.from_define(
        0xCF73BB51, 0x3ABF, 0x44A2, 0x85, 0xE0, 0x9A, 0x3D, 0xC7, 0xA1, 0x21, 0x32, 6
    )  # // DEVPROP_TYPE_STRING_LIST
    BRANDING_ICON = DevicePropertyKey.from_define(
        0xCF73BB51, 0x3ABF, 0x44A2, 0x85, 0xE0, 0x9A, 0x3D, 0xC7, 0xA1, 0x21, 0x32, 7
    )  # // DEVPROP_TYPE_STRING_LIST

    __slots__ = ()


class DeviceClassPropertyKeys:
    UPPER_FILTERS = DevicePropertyKey.from_define(
        0x4321918B, 0xF69E, 0x470D, 0xA5, 0xDE, 0x4D, 0x88, 0xC7, 0x5A, 0xD2, 0x4B, 19
    )  # // DEVPROP_TYPE_STRING_LIST
    LOWER_FILTERS = DevicePropertyKey.from_define(
        0x4321918B, 0xF69E, 0x470D, 0xA5, 0xDE, 0x4D, 0x88, 0xC7, 0x5A, 0xD2, 0x4B, 20
    )  # // DEVPROP_TYPE_STRING_LIST
    SECURITY = DevicePropertyKey.from_define(
        0x4321918B, 0xF69E, 0x470D, 0xA5, 0xDE, 0x4D, 0x88, 0xC7, 0x5A, 0xD2, 0x4B, 25
    )  # // DEVPROP_TYPE_SECURITY_DESCRIPTOR
    SECURITY_SDS = DevicePropertyKey.from_define(
        0x4321918B, 0xF69E, 0x470D, 0xA5, 0xDE, 0x4D, 0x88, 0xC7, 0x5A, 0xD2, 0x4B, 26
    )  # // DEVPROP_TYPE_SECURITY_DESCRIPTOR_STRING
    DEV_TYPE = DevicePropertyKey.from_define(
        0x4321918B, 0xF69E, 0x470D, 0xA5, 0xDE, 0x4D, 0x88, 0xC7, 0x5A, 0xD2, 0x4B, 27
    )  # // DEVPROP_TYPE_UINT32
    EXCLUSIVE = DevicePropertyKey.from_define(
        0x4321918B, 0xF69E, 0x470D, 0xA5, 0xDE, 0x4D, 0x88, 0xC7, 0x5A, 0xD2, 0x4B, 28
    )  # // DEVPROP_TYPE_BOOLEAN
    CHARACTERISTICS = DevicePropertyKey.from_define(
        0x4321918B, 0xF69E, 0x470D, 0xA5, 0xDE, 0x4D, 0x88, 0xC7, 0x5A, 0xD2, 0x4B, 29
    )  # // DEVPROP_TYPE_UINT32
    NAME = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 2
    )  # // DEVPROP_TYPE_STRING
    CLASS_NAME = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 3
    )  # // DEVPROP_TYPE_STRING
    ICON = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 4
    )  # // DEVPROP_TYPE_STRING
    CLASS_INSTALLER = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 5
    )  # // DEVPROP_TYPE_STRING
    PROP_PAGE_PROVIDER = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 6
    )  # // DEVPROP_TYPE_STRING
    NO_INSTALL_CLASS = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 7
    )  # // DEVPROP_TYPE_BOOLEAN
    NO_DISPLAY_CLASS = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 8
    )  # // DEVPROP_TYPE_BOOLEAN
    SILENT_INSTALL = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 9
    )  # // DEVPROP_TYPE_BOOLEAN
    NO_USE_CLASS = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 10
    )  # // DEVPROP_TYPE_BOOLEAN
    DEFAULT_SERVICE = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 11
    )  # // DEVPROP_TYPE_STRING
    ICON_PATH = DevicePropertyKey.from_define(
        0x259ABFFC, 0x50A7, 0x47CE, 0xAF, 0x8, 0x68, 0xC9, 0xA7, 0xD7, 0x33, 0x66, 12
    )  # // DEVPROP_TYPE_STRING_LIST
    DHP_REBALANCE_OPT_OUT = DevicePropertyKey.from_define(
        0xD14D3EF3, 0x66CF, 0x4BA2, 0x9D, 0x38, 0x0D, 0xDB, 0x37, 0xAB, 0x47, 0x01, 2
    )  # // DEVPROP_TYPE_BOOLEAN
    CLASS_CO_INSTALLERS = DevicePropertyKey.from_define(
        0x713D1703, 0xA2E2, 0x49F5, 0x92, 0x14, 0x56, 0x47, 0x2E, 0xF3, 0xDA, 0x5C, 2
    )  # // DEVPROP_TYPE_STRING_LIST

    __slots__ = ()


class DeviceInterfaceDevicePropertyKeys:
    FRIENDLY_NAME = DevicePropertyKey.from_define(
        0x026E516E, 0xB814, 0x414B, 0x83, 0xCD, 0x85, 0x6D, 0x6F, 0xEF, 0x48, 0x22, 2
    )  # // DEVPROP_TYPE_STRING
    ENABLED = DevicePropertyKey.from_define(
        0x026E516E, 0xB814, 0x414B, 0x83, 0xCD, 0x85, 0x6D, 0x6F, 0xEF, 0x48, 0x22, 3
    )  # // DEVPROP_TYPE_BOOLEAN
    CLASS_GUID = DevicePropertyKey.from_define(
        0x026E516E, 0xB814, 0x414B, 0x83, 0xCD, 0x85, 0x6D, 0x6F, 0xEF, 0x48, 0x22, 4
    )  # // DEVPROP_TYPE_GUID
    REFERENCE_STRING = DevicePropertyKey.from_define(
        0x026E516E, 0xB814, 0x414B, 0x83, 0xCD, 0x85, 0x6D, 0x6F, 0xEF, 0x48, 0x22, 5
    )  # // DEVPROP_TYPE_STRING
    RESTRICTED = DevicePropertyKey.from_define(
        0x026E516E, 0xB814, 0x414B, 0x83, 0xCD, 0x85, 0x6D, 0x6F, 0xEF, 0x48, 0x22, 6
    )  # // DEVPROP_TYPE_BOOLEAN
    UNRESTRICTED_APP_CAPABILITIES = DevicePropertyKey.from_define(
        0x026E516E, 0xB814, 0x414B, 0x83, 0xCD, 0x85, 0x6D, 0x6F, 0xEF, 0x48, 0x22, 8
    )  # // DEVPROP_TYPE_STRING_LIST
    SCHEMATIC_NAME = DevicePropertyKey.from_define(
        0x026E516E, 0xB814, 0x414B, 0x83, 0xCD, 0x85, 0x6D, 0x6F, 0xEF, 0x48, 0x22, 9
    )  # // DEVPROP_TYPE_STRING

    __slots__ = ()


class DeviceInterfaceClassDevicePropertyKeys:
    DEFAULT_INTERFACE = DevicePropertyKey.from_define(
        0x14C83A99, 0x0B3F, 0x44B7, 0xBE, 0x4C, 0xA1, 0x78, 0xD3, 0x99, 0x05, 0x64, 2
    )  # // DEVPROP_TYPE_STRING
    NAME = DevicePropertyKey.from_define(
        0x14C83A99, 0x0B3F, 0x44B7, 0xBE, 0x4C, 0xA1, 0x78, 0xD3, 0x99, 0x05, 0x64, 3
    )  # // DEVPROP_TYPE_STRING

    __slots__ = ()


class DeviceContainerDevicePropertyKeys:
    ADDRESS = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 51
    )  # // DEVPROP_TYPE_STRING | DEVPROP_TYPE_STRING_LIST
    DISCOVERY_METHOD = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 52
    )  # // DEVPROP_TYPE_STRING_LIST
    IS_ENCRYPTED = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 53
    )  # // DEVPROP_TYPE_BOOLEAN
    IS_AUTHENTICATED = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 54
    )  # // DEVPROP_TYPE_BOOLEAN
    IS_CONNECTED = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 55
    )  # // DEVPROP_TYPE_BOOLEAN
    IS_PAIRED = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 56
    )  # // DEVPROP_TYPE_BOOLEAN
    ICON = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 57
    )  # // DEVPROP_TYPE_STRING
    VERSION = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 65
    )  # // DEVPROP_TYPE_STRING
    LAST_SEEN = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 66
    )  # // DEVPROP_TYPE_FILETIME
    LAST_CONNECTED = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 67
    )  # // DEVPROP_TYPE_FILETIME
    IS_SHOW_IN_DISCONNECTED_STATE = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 68
    )  # // DEVPROP_TYPE_BOOLEAN
    IS_LOCAL_MACHINE = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 70
    )  # // DEVPROP_TYPE_BOOLEAN
    METADATA_PATH = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 71
    )  # // DEVPROP_TYPE_STRING
    IS_METADATA_SEARCH_IN_PROGRESS = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 72
    )  # // DEVPROP_TYPE_BOOLEAN
    METADATA_CHECKSUM = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 73
    )  # // DEVPROP_TYPE_BINARY
    IS_NOT_INTERESTING_FOR_DISPLAY = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 74
    )  # // DEVPROP_TYPE_BOOLEAN
    LAUNCH_DEVICE_STAGE_ON_DEVICE_CONNECT = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 76
    )  # // DEVPROP_TYPE_BOOLEAN
    LAUNCH_DEVICE_STAGE_FROM_EXPLORER = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 77
    )  # // DEVPROP_TYPE_BOOLEAN
    BASELINE_EXPERIENCE_ID = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 78
    )  # // DEVPROP_TYPE_GUID
    IS_DEVICE_UNIQUELY_IDENTIFIABLE = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 79
    )  # // DEVPROP_TYPE_BOOLEAN
    ASSOCIATION_ARRAY = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 80
    )  # // DEVPROP_TYPE_STRING_LIST
    DEVICE_DESCRIPTION1 = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 81
    )  # // DEVPROP_TYPE_STRING
    DEVICE_DESCRIPTION2 = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 82
    )  # // DEVPROP_TYPE_STRING
    HAS_PROBLEM = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 83
    )  # // DEVPROP_TYPE_BOOLEAN
    IS_SHARED_DEVICE = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 84
    )  # // DEVPROP_TYPE_BOOLEAN
    IS_NETWORK_DEVICE = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 85
    )  # // DEVPROP_TYPE_BOOLEAN
    IS_DEFAULT_DEVICE = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 86
    )  # // DEVPROP_TYPE_BOOLEAN
    METADATA_CABINET = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 87
    )  # // DEVPROP_TYPE_STRING
    REQUIRES_PAIRING_ELEVATION = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 88
    )  # // DEVPROP_TYPE_BOOLEAN
    EXPERIENCE_ID = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 89
    )  # // DEVPROP_TYPE_GUID
    CATEGORY = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 90
    )  # // DEVPROP_TYPE_STRING_LIST
    CATEGORY_DESC_SINGULAR = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 91
    )  # // DEVPROP_TYPE_STRING_LIST
    CATEGORY_DESC_PLURAL = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 92
    )  # // DEVPROP_TYPE_STRING_LIST
    CATEGORY_ICON = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 93
    )  # // DEVPROP_TYPE_STRING
    CATEGORY_GROUP_DESC = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 94
    )  # // DEVPROP_TYPE_STRING_LIST
    CATEGORY_GROUP_ICON = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 95
    )  # // DEVPROP_TYPE_STRING
    PRIMARY_CATEGORY = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 97
    )  # // DEVPROP_TYPE_STRING
    UNPAIR_UNINSTALL = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 98
    )  # // DEVPROP_TYPE_BOOLEAN
    REQUIRES_UNINSTALL_ELEVATION = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 99
    )  # // DEVPROP_TYPE_BOOLEAN
    DEVICE_FUNCTION_SUB_RANK = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 100
    )  # // DEVPROP_TYPE_UINT32
    ALWAYS_SHOW_DEVICE_AS_CONNECTED = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 101
    )  # // DEVPROP_TYPE_BOOLEAN
    CONFIG_FLAGS = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 105
    )  # // DEVPROP_TYPE_UINT32
    PRIVILEGED_PACKAGE_FAMILY_NAMES = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 106
    )  # // DEVPROP_TYPE_STRING_LIST
    CUSTOM_PRIVILEGED_PACKAGE_FAMILY_NAMES = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 107
    )  # // DEVPROP_TYPE_STRING_LIST
    IS_REBOOT_REQUIRED = DevicePropertyKey.from_define(
        0x78C34FC8, 0x104A, 0x4ACA, 0x9E, 0xA4, 0x52, 0x4D, 0x52, 0x99, 0x6E, 0x57, 108
    )  # // DEVPROP_TYPE_BOOLEAN
    FRIENDLY_NAME = DevicePropertyKey.from_define(
        0x656A3BB3, 0xECC0, 0x43FD, 0x84, 0x77, 0x4A, 0xE0, 0x40, 0x4A, 0x96, 0xCD, 12288
    )  # // DEVPROP_TYPE_STRING
    MANUFACTURER = DevicePropertyKey.from_define(
        0x656A3BB3, 0xECC0, 0x43FD, 0x84, 0x77, 0x4A, 0xE0, 0x40, 0x4A, 0x96, 0xCD, 8192
    )  # // DEVPROP_TYPE_STRING
    MODEL_NAME = DevicePropertyKey.from_define(
        0x656A3BB3, 0xECC0, 0x43FD, 0x84, 0x77, 0x4A, 0xE0, 0x40, 0x4A, 0x96, 0xCD, 8194
    )  # // DEVPROP_TYPE_STRING (localizable)
    MODEL_NUMBER = DevicePropertyKey.from_define(
        0x656A3BB3, 0xECC0, 0x43FD, 0x84, 0x77, 0x4A, 0xE0, 0x40, 0x4A, 0x96, 0xCD, 8195
    )  # // DEVPROP_TYPE_STRING
    INSTALL_IN_PROGRESS = DevicePropertyKey.from_define(
        0x83DA6326, 0x97A6, 0x4088, 0x94, 0x53, 0xA1, 0x92, 0x3F, 0x57, 0x3B, 0x29, 9
    )  # // DEVPROP_TYPE_BOOLEAN

    __slots__ = ()


class DeviceDisplayDevicePropertyKeys:
    DISCOVERY_METHOD = DeviceContainerDevicePropertyKeys.DISCOVERY_METHOD
    IS_SHOW_IN_DISCONNECTED_STATE = DeviceContainerDevicePropertyKeys.IS_SHOW_IN_DISCONNECTED_STATE
    IS_NOT_INTERESTING_FOR_DISPLAY = DeviceContainerDevicePropertyKeys.IS_NOT_INTERESTING_FOR_DISPLAY
    IS_NETWORK_DEVICE = DeviceContainerDevicePropertyKeys.IS_NETWORK_DEVICE
    CATEGORY = DeviceContainerDevicePropertyKeys.CATEGORY
    UNPAIR_UNINSTALL = DeviceContainerDevicePropertyKeys.UNPAIR_UNINSTALL
    REQUIRES_UNINSTALL_ELEVATION = DeviceContainerDevicePropertyKeys.REQUIRES_UNINSTALL_ELEVATION
    ALWAYS_SHOW_DEVICE_AS_CONNECTED = DeviceContainerDevicePropertyKeys.ALWAYS_SHOW_DEVICE_AS_CONNECTED

    __slots__ = ()


class DeviceQueryDevicePropertyKeys:

    OBJECT_TYPE = DevicePropertyKey.from_define(
        0x13673F42, 0xA3D6, 0x49F6, 0xB4, 0xDA, 0xAE, 0x46, 0xE0, 0xC5, 0x23, 0x7C, 2
    )  # // DEVPROP_TYPE_UINT32

    __slots__ = ()

    # #define DEVPKEY_Numa_Proximity_Domain  DEVPKEY_Device_Numa_Proximity_Domain
